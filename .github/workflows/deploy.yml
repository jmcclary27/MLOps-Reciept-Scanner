name: Deploy to Vertex AI

on:
  push:
    branches: [ master ]

env:
  REGION: us-central1
  IMAGE_NAME: trocr-flask-api
  REPO_NAME: trocr-api-repo

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v3

    - name: ☁️ Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}

    - name: ⬇️ Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: 🔐 Authenticate Docker to Artifact Registry
      run: |
        echo "Authenticating Docker for Artifact Registry..."
        gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: 🛠️ Build Docker image
      run: |
        docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }} .

    - name: 📤 Push Docker image to Artifact Registry
      run: |
        docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}

    - name: ☁️ Upload model to Vertex AI
      run: |
        gcloud ai models upload \
          --region=${{ env.REGION }} \
          --display-name=trocr-model \
          --container-image-uri=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}

    - name: 🔍 Check if endpoint exists
      id: check-endpoint
      run: |
        EXISTING_ENDPOINT=$(gcloud ai endpoints list --region=${{ env.REGION }} --filter="displayName=trocr-endpoint" --format="value(name)")
        echo "EXISTING_ENDPOINT=$EXISTING_ENDPOINT" >> $GITHUB_ENV

    - name: 🧩 Create endpoint if missing
      if: env.EXISTING_ENDPOINT == ''
      run: |
        gcloud ai endpoints create \
          --region=${{ env.REGION }} \
          --display-name=trocr-endpoint

    - name: 🚀 Deploy model to Vertex AI endpoint
      run: |
        MODEL_ID=$(gcloud ai models list --region=${{ env.REGION }} --filter="displayName=trocr-model" --format="value(name)" | head -n 1)
        ENDPOINT_ID=$(gcloud ai endpoints list --region=${{ env.REGION }} --filter="displayName=trocr-endpoint" --format="value(name)" | head -n 1)

        gcloud ai endpoints deploy-model $ENDPOINT_ID \
          --region=${{ env.REGION }} \
          --model=$MODEL_ID \
          --display-name=trocr-deployed \
          --traffic-split=0=100
