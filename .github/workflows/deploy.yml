name: Deploy to Vertex AI

on:
  push:
    branches: [ master ]

env:
  REGION: ${{ secrets.GCP_REGION }}
  IMAGE_NAME: ${{ secrets.GCP_IMAGE_NAME }}
  CONTAINER_NAME: ${{ secrets.VERTEX_CONTAINER_NAME }}
  ENDPOINT_NAME: ${{ secrets.VERTEX_ENDPOINT_NAME }}
  MODEL_NAME: ${{ secrets.VERTEX_MODEL_NAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY_JSON }}
        export_default_credentials: true

    - name: Authenticate Docker to Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Build and Push Docker Image
      run: |
        docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.CONTAINER_NAME }}/${{ env.IMAGE_NAME }} .
        docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.CONTAINER_NAME }}/${{ env.IMAGE_NAME }}

    - name: Upload Model to Vertex AI
      run: |
        gcloud ai models upload \
          --region=${{ env.REGION }} \
          --display-name=${{ env.MODEL_NAME }} \
          --container-image-uri=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.CONTAINER_NAME }}/${{ env.IMAGE_NAME }}

    - name: Create Endpoint (if not exists)
      run: |
        ENDPOINT_EXIST=$(gcloud ai endpoints list --region=${{ env.REGION }} --filter="displayName=${{ env.ENDPOINT_NAME }}" --format="value(name)")
        if [ -z "$ENDPOINT_EXIST" ]; then
          gcloud ai endpoints create \
            --region=${{ env.REGION }} \
            --display-name=${{ env.ENDPOINT_NAME }}
        else
          echo "âœ… Endpoint already exists: $ENDPOINT_EXIST"
        fi

    - name: Deploy Model to Endpoint
      run: |
        MODEL_ID=$(gcloud ai models list --region=${{ env.REGION }} --filter="displayName=${{ env.MODEL_NAME }}" --format="value(name)" | head -n 1)
        ENDPOINT_ID=$(gcloud ai endpoints list --region=${{ env.REGION }} --filter="displayName=${{ env.ENDPOINT_NAME }}" --format="value(name)" | head -n 1)

        gcloud ai endpoints deploy-model $ENDPOINT_ID \
          --region=${{ env.REGION }} \
          --model=$MODEL_ID \
          --display-name=trocr-deployed \
          --traffic-split=0=100
